services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - ${PORT}:${PORT}
    environment:
      PORT: ${PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_DRIVER: ${DB_DRIVER}
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - migrations:/app/migrations
    networks:
      - internal

  db:
    image: postgres:alpine
    ports:
      - ${DB_PORT}:5432
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}' ]
      interval: 3s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - internal

  migrate:
    image: migrate/migrate:latest
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
    command: ['-path', '/migrations/', '-database', '${DB_CONNECTION_STRING}', 'up']
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - migrations:/migrations
    networks:
      - internal


volumes:
  db-data:
  migrations:

networks:
  internal: