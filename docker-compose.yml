services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - ${PORT}:${PORT}
    environment:
      PORT: ${PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SCHEMA: ${DB_SCHEMA}
      DB_DRIVER: ${DB_DRIVER}
      DB_MIGRATIONS: ${DB_MIGRATIONS}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./database/migrations:/app/database/migrations
    networks:
      - internal

  db:
    image: postgres:alpine
    ports:
      - ${DB_PORT}:5432
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U {DB_USERNAME} -d {DB_DATABASE}' ]
      interval: 3s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - internal

volumes:
  db-data:

networks:
  internal: